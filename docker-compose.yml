version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: airoom_postgres
    environment:
      POSTGRES_DB: airoom_db
      POSTGRES_USER: airoom_user
      POSTGRES_PASSWORD: airoom_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - airoom_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airoom_user -d airoom_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: airoom_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: airoom_admin
      MONGO_INITDB_ROOT_PASSWORD: airoom_password
      MONGO_INITDB_DATABASE: airoom_mongo
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - airoom_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: airoom_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - airoom_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: airoom_backend
    environment:
      - DATABASE_URL=postgresql://airoom_user:airoom_password@postgres:5432/airoom_db
      - MONGODB_URL=mongodb://airoom_admin:airoom_password@mongodb:27017/airoom_mongo?authSource=admin
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-here-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/audio_outputs:/app/audio_outputs
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - airoom_network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: airoom_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - airoom_network
    restart: unless-stopped

  # Celery Worker (Background Tasks)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: airoom_celery_worker
    command: celery -A main.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://airoom_user:airoom_password@postgres:5432/airoom_db
      - MONGODB_URL=mongodb://airoom_admin:airoom_password@mongodb:27017/airoom_mongo?authSource=admin
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-here-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/audio_outputs:/app/audio_outputs
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - airoom_network
    restart: unless-stopped

  # Celery Beat (Scheduled Tasks)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: airoom_celery_beat
    command: celery -A main.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://airoom_user:airoom_password@postgres:5432/airoom_db
      - MONGODB_URL=mongodb://airoom_admin:airoom_password@mongodb:27017/airoom_mongo?authSource=admin
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-here-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - airoom_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: airoom_nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - airoom_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  airoom_network:
    driver: bridge 